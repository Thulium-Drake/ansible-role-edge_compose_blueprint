---
# yamllint disable rule:line-length
- name: 'Ensure temporary work directories'
  ansible.builtin.file:
    path: "/tmp/compose_{{ blueprint['name'] }}/{{ directory }}"
    state: 'directory'
    mode: '0700'
  loop:
    - 'microshift'
    - 'toml'
    - 'rpm/BUILD'
    - "rpm/BUILDROOT/edge-{{ blueprint['name'] }}-config-{{ edge_compose_blueprint_git_version }}-{{ ansible_facts['date_time']['epoch'] }}.x86_64"
    - 'rpm/SPECS'
    - 'rpm/RPMS'
  loop_control:
    loop_var: 'directory'

- name: 'Ensure output directories'
  ansible.builtin.file:
    path: "{{ directory }}"
    state: 'directory'
    mode: '0755'
  loop:
    - '/var/www/html/config-rpms'
    - "/var/www/html/{{ blueprint['name'] }}"
  loop_control:
    loop_var: 'directory'

- name: 'Get microshift container image URIs'
  when: blueprint['microshift_version'] is defined
  block:
    - name: 'Download RPM and extract release-x86_64.json'
      ansible.builtin.shell: |
        set -o pipefail
        cd /tmp/compose_{{ blueprint['name'] }}/microshift
        dnf download microshift-release-info-{{ blueprint['microshift_version'] }} 1>&2
        rpm2cpio microshift-release-info-{{ blueprint['microshift_version'] }}-*.rpm | \
        cpio --to-stdout -vi ./usr/share/microshift/release/release-x86_64.json
      register: 'microshift_rpm_contents'
      changed_when: false  # This task collects information

    - name: 'Store results in fact'
      ansible.builtin.set_fact:
        edge_microshift_info: "{{ microshift_rpm_contents['stdout'] | from_json }}"

    - name: 'Render Microshift TOML snippet'
      ansible.builtin.copy:
        content: |
          [[packages]]
          name = "microshift"
          version = "{{ blueprint['microshift_version'] }}"

          [[packages]]
          name = "openshift-clients"

          {% for img in edge_microshift_info['images'] | dict2items %}
          [[containers]]
          source = "{{ img['value'] }}"
          {% endfor %}
        dest: "/tmp/compose_{{ blueprint['name'] }}/toml/01_microshift_images.toml"
        mode: '0644'

    - name: 'Add microshift to list of services to enable'
      ansible.builtin.set_fact:
        blueprint_enabled_services:
          - 'microshift.service'

- name: 'Get Microshift Multus container image URIs'
  when:
    - blueprint['microshift_multus_enabled'] is defined
    - blueprint['microshift_multus_enabled']
  block:
    - name: 'Download RPM and extract release-x86_64.json'
      ansible.builtin.shell: |
        set -o pipefail
        cd /tmp/compose_{{ blueprint['name'] }}/microshift
        dnf download microshift-multus-release-info-{{ blueprint['microshift_version'] }} 1>&2
        rpm2cpio microshift-multus-release-info-{{ blueprint['microshift_version'] }}-*.rpm | \
        cpio --to-stdout -vi ./usr/share/microshift/release/release-multus-x86_64.json
      register: 'microshift_multus_rpm_contents'
      changed_when: false  # This task collects information

    - name: 'Store results in fact'
      ansible.builtin.set_fact:
        edge_microshift_multus_info: "{{ microshift_multus_rpm_contents['stdout'] | from_json }}"

    - name: 'Render Microshift TOML snippet'
      ansible.builtin.copy:
        content: |
          [[packages]]
          name = "microshift-multus"
          version = "{{ blueprint['microshift_version'] }}"

          {% for img in edge_microshift_multus_info['images'] | dict2items %}
          [[containers]]
          source = "{{ img['value'] }}"
          {% endfor %}
        dest: "/tmp/compose_{{ blueprint['name'] }}/toml/01_microshift_multus_images.toml"
        mode: '0644'

- name: 'Render base blueprint template'
  ansible.builtin.template:
    src: "{{ edge_compose_blueprint_checkout }}/base/{{ blueprint['base'] }}"
    dest: "/tmp/compose_{{ blueprint['name'] }}/toml/00_base.toml"
    mode: '0644'
  when: "'toml.j2' in blueprint['base']"

- name: 'Copy base blueprint'
  ansible.builtin.copy:
    src: "{{ edge_compose_blueprint_checkout }}/base/{{ blueprint['base'] }}"
    dest: "/tmp/compose_{{ blueprint['name'] }}/toml/00_base.toml"
    mode: '0644'
  when: "'.toml.j2' not in blueprint['base']"

- name: 'Collect module blueprint components'
  ansible.builtin.find:
    paths: >-
      {%- set module_paths = [] -%}
      {%- for module in blueprint['modules'] | default([]) -%}
      {%-   set line = edge_compose_blueprint_checkout + '/modules/' + module -%}
      {%-   set _ = module_paths.append(line) -%}
      {%- endfor -%}
      {{ module_paths }}
    depth: 1
    file_type: 'any'
  delegate_to: 'localhost'  # This is on the Ansible Controller in the cache directory
  become: false
  register: 'module_components'

- name: 'Add enabled services to list'
  ansible.builtin.set_fact:
    blueprint_enabled_services: "{{ (blueprint_enabled_services | default([])) + lookup('ansible.builtin.file', module['path']) | split('\n') }}"
  when: module['path'].endswith('services_enable')
  loop: "{{ module_components['files'] | default([]) }}"
  loop_control:
    loop_var: 'module'

- name: 'Add disabled services to list'
  ansible.builtin.set_fact:
    blueprint_disabled_services: "{{ (blueprint_disabled_services | default([])) + lookup('ansible.builtin.file', module['path']) | split('\n') }}"
  when: module['path'].endswith('services_disable')
  loop: "{{ module_components['files'] | default([]) }}"
  loop_control:
    loop_var: 'module'

- name: 'Render blueprint services snippet'
  ansible.builtin.copy:
    content: |
      [customizations.services]
      enabled = {{ blueprint_enabled_services | default([]) | to_json }}
      disabled = {{ blueprint_disabled_services | default([]) | to_json }}
    dest: "/tmp/compose_{{ blueprint['name'] }}/toml/00_services.toml"
    mode: '0644'

- name: 'Render blueprint module templates'
  ansible.builtin.template:
    src: "{{ module['path'] }}"
    dest: "/tmp/compose_{{ blueprint['name'] }}/toml/{{ module_idx }}_{{ module['path'] | basename | regex_replace('.j2', '') }}"
    mode: '0644'
  when: module['path'].endswith('.toml.j2')
  loop: "{{ module_components['files'] | default([]) }}"
  loop_control:
    loop_var: 'module'
    index_var: 'module_idx'

- name: 'Copy blueprint modules'
  ansible.builtin.copy:
    src: "{{ module['path'] }}"
    dest: "/tmp/compose_{{ blueprint['name'] }}/toml/{{ module_idx }}_{{ module['path'] | basename }}"
    mode: '0644'
  when: module['path'].endswith('.toml')
  loop: "{{ module_components['files'] | default([]) }}"
  loop_control:
    loop_var: 'module'
    index_var: 'module_idx'

- name: 'Build module RPM files'
  ansible.builtin.include_tasks: 'tasks/build_module_rpm.yml'
  loop: "{{ blueprint['modules'] }}"
  loop_control:
    loop_var: 'module_name'

- name: 'Add package snippet for installing config and module RPMs'
  ansible.builtin.copy:
    content: |
      [[packages]]
      name = "edge-{{ blueprint['name'] }}-config"
      version = "{{ edge_compose_blueprint_git_version }}"
      {% for module in blueprint['modules'] %}
      [[packages]]
      name = "edge-{{ blueprint['name'] }}-{{ module }}"
      version = "{{ edge_compose_blueprint_git_version }}"
      {% endfor %}
    dest: "/tmp/compose_{{ blueprint['name'] }}/toml/00_config_rpm.toml"
    mode: '0644'

- name: 'Assemble blueprint file'
  ansible.builtin.assemble:
    src: "/tmp/compose_{{ blueprint['name'] }}/toml"
    dest: "/etc/osbuild-composer/blueprints/{{ blueprint['name'] }}.toml"
    mode: '0644'

- name: 'Render Kickstart profile'
  ansible.builtin.template:
    src: "{{ edge_compose_blueprint_checkout }}/kickstart/{{ blueprint['kickstart_profile'] }}"
    dest: "/var/www/html/{{ blueprint['name'] }}/install-{{ ref | regex_replace('/', '') }}.ks"
    mode: '0644'
  loop: "{{ (blueprint['stable_refs'] | default([])) + [blueprint['ref']] }}"
  loop_control:
    loop_var: 'ref'
  when: blueprint['kickstart_profile'].endswith('.ks.j2')

- name: 'Ensure directory for image release information'
  ansible.builtin.file:
    path: "/tmp/compose_{{ blueprint['name'] }}/rpm/BUILDROOT/edge-{{ blueprint['name'] }}-config-{{ edge_compose_blueprint_git_version }}-{{ ansible_facts['date_time']['epoch'] }}.x86_64/usr/lib/vendor"
    state: 'directory'
    mode: '0755'

- name: 'Ensure image release information'
  ansible.builtin.template:
    src: 'image_release.ini.j2'
    dest: "/tmp/compose_{{ blueprint['name'] }}/rpm/BUILDROOT/edge-{{ blueprint['name'] }}-config-{{ edge_compose_blueprint_git_version }}-{{ ansible_facts['date_time']['epoch'] }}.x86_64/usr/lib/vendor/image_release.fact"
    mode: '0644'

- name: 'Collect files in config RPM'
  ansible.builtin.find:
    paths: "/tmp/compose_{{ blueprint['name'] }}/rpm/BUILDROOT/edge-{{ blueprint['name'] }}-config-{{ edge_compose_blueprint_git_version }}-{{ ansible_facts['date_time']['epoch'] }}.x86_64"
    recurse: true
  register: 'config_rpm_files'

- name: 'Render config RPM Spec file'
  ansible.builtin.template:
    src: 'image_config.spec.j2'
    dest: "/tmp/compose_{{ blueprint['name'] }}/rpm/SPECS/image_config.spec"
    mode: '0644'

- name: 'Build config RPM'  # The RPM macro cannot use $PWD, as the envvar does not change when using chdir
  ansible.builtin.command: rpmbuild --define "_topdir /tmp/compose_{{ blueprint['name'] }}/rpm" -v -bb SPECS/image_config.spec
  args:
    chdir: "/tmp/compose_{{ blueprint['name'] }}/rpm"
    creates: "/tmp/compose_{{ blueprint['name'] }}/rpm/RPMS/x86_64/edge-{{ blueprint['name'] }}-config-{{ edge_compose_blueprint_git_version }}-{{ ansible_facts['date_time']['epoch'] }}.x86_64.rpm"

- name: 'Copy RPM to output directory'
  ansible.builtin.copy:
    src: "/tmp/compose_{{ blueprint['name'] }}/rpm/RPMS/x86_64/edge-{{ blueprint['name'] }}-config-{{ edge_compose_blueprint_git_version }}-{{ ansible_facts['date_time']['epoch'] }}.x86_64.rpm"
    dest: "/var/www/html/config-rpms/edge-{{ blueprint['name'] }}-config-{{ edge_compose_blueprint_git_version }}-{{ ansible_facts['date_time']['epoch'] }}.x86_64.rpm"
    mode: '0644'
    remote_src: true

- name: 'Update config RPM repository metadata'
  ansible.builtin.command: /usr/bin/createrepo .
  args:
    chdir: '/var/www/html/config-rpms'
  changed_when: true

- name: 'Update tool RPM repository metadata'
  ansible.builtin.command: /usr/bin/createrepo .
  args:
    chdir: '/var/www/html/tools-rpms'
  changed_when: true

- name: 'Clean up temporary work directory'
  ansible.builtin.file:
    path: "/tmp/compose_{{ blueprint['name'] }}"
    state: 'absent'
